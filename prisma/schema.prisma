// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String           @id @default(uuid())
  email                     String?          @unique
  phoneNumber               String?          @unique
  passwordHash              String?
  rtHash                    String?
  createdAt                 DateTime         @default(now())
  updatedAt                 DateTime         @updatedAt
  isActive                  Boolean          @default(true)
  isVerified                Boolean          @default(false)
  verificationCode          Int?
  verificationCodeExpiresAt DateTime?
  resetPasswordToken        String?
  resetPasswordExpiresAt    DateTime?
  firstName                 String
  lastName                  String
  dateOfBirth               DateTime?
  profilePicture            String?
  role                      String           @default("USER")
  authProviders             AuthProvider[]
  campaigns                 Campaign[]
  Donation                  Donation[]
  like                      like[]
  Comment                   Comment[]
  Testimonial               Testimonial[]
  CampaignUpdate            CampaignUpdate[]

  @@map("users")
}

model AuthProvider {
  id           String   @id @default(uuid())
  userId       String
  providerType String
  providerId   String
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("authProviders")
}

model BankDetail {
  id            String   @id @default(uuid())
  holderName    String
  bankName      BankName
  accountNumber String
  campaignId    String   @unique
  campaign      Campaign @relation("CampaignBankDetails", fields: [campaignId], references: [id])

  @@map("bank_details")
}

model Campaign {
  id           String         @id @default(uuid())
  userId       String?
  agentId      String?
  title        String         @db.VarChar(50)
  description  String
  goalAmount   Decimal        @db.Decimal(11, 2)
  category     Category
  raisedAmount Decimal        @default(0.00) @db.Decimal(11, 2)
  status       CampaignStatus @default(PENDING)
  deadline     DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  closeCampaignVerificationCode          Int?
  closeCampaignVerificationCodeExpiresAt DateTime?

  // Relations
  campaignMedia CampaignMedia[] @relation("CampaignMedia")

  user  User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  agent Agent? @relation(fields: [agentId], references: [id])

  BankDetail BankDetail? @relation("CampaignBankDetails")

  businessId     String?          @unique
  charityId      String?          @unique
  business       Business?        @relation(fields: [businessId], references: [id])
  charity        Charity?         @relation(fields: [charityId], references: [id])
  ClosedCampaign ClosedCampaign?
  Donation       Donation[]
  like           like[]
  Comment        Comment[]
  CampaignUpdate CampaignUpdate[]

  @@index([businessId, charityId])
  @@map("campaigns")
}

model CampaignUpdate {
  id         String  @id @default(uuid())
  campaignId String
  userId     String?
  agentId    String?

  title     String
  content   String
  createdAt DateTime @default(now())

  user     User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  agent    Agent?   @relation(fields: [agentId], references: [id], onDelete: Cascade)
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@map("campaign_updates")
}

model Business {
  id       String         @id @default(uuid())
  fullName String
  website  String?
  sector   BusinessSector

  tinNumber         String  @unique
  licenseNumber     String  @unique
  publicEmail       String?
  publicPhoneNumber String?
  contactEmail      String
  contactPhone      String
  region            String
  city              String
  relativeLocation  String?

  docs     CampaignDoc[]
  campaign Campaign?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations

  @@map("businesses")
}

model Charity {
  id                String  @id @default(uuid())
  fullName          String
  isOrganization    Boolean
  licenseNumber     String? @unique
  tinNumber         String? @unique
  website           String?
  publicEmail       String?
  publicPhoneNumber String?
  contactEmail      String
  contactPhone      String
  region            String
  city              String
  relativeLocation  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  campaign Campaign?

  // 
  docs CampaignDoc[]

  @@map("charities")
}

model CampaignMedia {
  id         String @id @default(uuid())
  campaignId String
  url        String

  imageType ImageType

  createdAt DateTime @default(now())

  // Relations
  campaignMedia Campaign @relation("CampaignMedia", fields: [campaignId], references: [id])

  @@map("campaignMedias")
}

model CampaignDoc {
  id        String   @id @default(uuid())
  url       String
  createdAt DateTime @default(now())

  docType DocType

  // Relations
  businessId String?
  business   Business? @relation(fields: [businessId], references: [id], onDelete: Cascade)

  charityId String?
  charity   Charity? @relation(fields: [charityId], references: [id], onDelete: Cascade)

  @@map("campaignDocs")
}

model Admin {
  id                     String     @id @default(uuid())
  email                  String     @unique
  passwordHash           String?
  rtHash                 String?
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt
  resetPasswordToken     String?
  resetPasswordExpiresAt DateTime?
  firstName              String
  lastName               String
  dateOfBirth            DateTime
  role                   AdminRoles
  otlToken               String?
  isActive               Boolean    @default(true)
  otlTokenExpiresAt      DateTime?
  AgentsCreated          Agent[]

  @@map("admins")
}

model Agent {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  firstName    String
  lastName     String
  dateOfBirth  DateTime

  street     String?
  city       String?
  state      String?
  postalCode String?
  country    String?

  idFront String
  idBack  String

  role           AdminRoles       @default(CALLCENTERAGENT)
  isActive       Boolean          @default(true)
  isDeleted      Boolean          @default(false)
  isVerified     Boolean          @default(false)
  createdById    String
  createdBy      Admin?           @relation(fields: [createdById], references: [id])
  Campaign       Campaign[]
  CampaignUpdate CampaignUpdate[]

  @@map("agents")
}

model like {
  id         String   @id @default(uuid())
  userId     String
  campaignId String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user          User         @relation(fields: [userId], references: [id])
  campaign      Campaign?    @relation(fields: [campaignId], references: [id])
  Testimonial   Testimonial? @relation(fields: [testimonialId], references: [id])
  testimonialId String?
}

model Comment {
  id            String  @id @default(uuid())
  userId        String
  campaignId    String?
  testimonialId String?
  commentText   String
  parentId      String?
  isActive      Boolean @default(true)

  campaign     Campaign?    @relation(fields: [campaignId], references: [id])
  successStory Testimonial? @relation(fields: [testimonialId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  parent  Comment?  @relation("CommentParent", fields: [parentId], references: [id])
  replies Comment[] @relation("CommentParent")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([campaignId])
  @@index([userId])
  @@index([parentId])
  @@map("Comments")
}

model Testimonial {
  id               String             @id @default(uuid())
  userId           String
  closedCampaignId String             @unique
  title            String
  content          String
  images           TestimonialImage[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  user           User           @relation(fields: [userId], references: [id])
  closedCampaign ClosedCampaign @relation(fields: [closedCampaignId], references: [id])
  comments       Comment[]
  likes          like[]
}

model TestimonialImage {
  id            String   @id @default(uuid())
  testimonialId String
  url           String
  createdAt     DateTime @default(now())

  testimonial Testimonial @relation(fields: [testimonialId], references: [id], onDelete: Cascade)
}

model ClosedCampaign {
  id          String   @id @default(uuid())
  campaignId  String   @unique
  isCompleted Boolean
  reason      String?
  createdAt   DateTime @default(now())

  campaign    Campaign     @relation(fields: [campaignId], references: [id])
  Testimonial Testimonial?
}

model Donation {
  id             String        @id @default(uuid())
  campaignId     String
  campaign       Campaign      @relation(fields: [campaignId], references: [id])
  userId         String?
  user           User?         @relation(fields: [userId], references: [id])
  amount         Decimal
  txRef          String        @unique
  paymentStatus  PaymentStatus @default(PENDING)
  donorFirstName String?
  donorLastName  String?
  email          String?
  isAnonymous    Boolean       @default(false)
  createdAt      DateTime      @default(now())
}

enum CampaignStatus {
  PENDING
  ACTIVE
  CLOSED
  REJECTED
  DELETED
  REMOVED
}

enum AdminRoles {
  SUPERADMIN
  CALLCENTERAGENT
  CAMPAIGNREVIEWER
}

enum AdminActions {
  CREATE
  DELETE
  UPDATE
  APPROVE
  REJECT
}

enum BusinessSector {
  AGRICULTURE
  CONSTRUCTION
  EDUCATION
  ENERGY
  MANUFACTURING
  MEDIA
  MINING
  TECHNOLOGY
  TEXTILE
  TOURISM
  TRANSPORT
  OTHER
}

enum Category {
  MEDICAL
  RELOCATION
  REHABILITATION
  DISASTER_RELIEF
  LEGAL
  CHILDCARE
  EDUCATION
  POVERTY_ALLEVIATION
  EDUCATION_SUPPORT
  ELDERLY_ASSISTANCE
  HEALTHCARE_ASSISTANCE
  HUMAN_RIGHTS
  ENVIRONMENTAL_CONSERVATION
  REFUGEE_AID
  STARTUP_FUNDING
  PRODUCT_LAUNCH
  BUSINESS_EXPANSION
  EVENT_SPONSORSHIP
  RESEARCH_AND_DEVELOPMENT
}

enum DocType {
  TIN_CERTIFICATE
  REGISTRATION_CERTIFICATE
  PERSONAL_DOCUMENT
  SUPPORTING_DOCUMENT
}

enum ImageType {
  COVER_IMAGE
  SUPPORTING_IMAGE
  LOGO
}

enum BankName {
  AWASH_BANK
  ABAY_BANK
  COMMERCIAL_BANK_OF_ETHIOPIA
  ABYSSINIA_BANK
  ZEMEN_BANK
}

enum PaymentStatus {
  PENDING
  VERIFIED
}
