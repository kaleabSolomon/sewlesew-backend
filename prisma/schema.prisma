// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String         @id @default(uuid())
  email                     String?        @unique
  phoneNumber               String?        @unique
  passwordHash              String?
  rtHash                    String?
  createdAt                 DateTime       @default(now())
  updatedAt                 DateTime       @updatedAt
  isActive                  Boolean        @default(true)
  isVerified                Boolean        @default(false)
  verificationCode          Int?
  verificationCodeExpiresAt DateTime?
  resetPasswordToken        String?
  resetPasswordExpiresAt    DateTime?
  firstName                 String
  lastName                  String
  dateOfBirth               DateTime?
  profilePicture            String?
  role                      String         @default("USER")
  authProviders             AuthProvider[]
  campaigns                 Campaign[]

  @@map("users")
}

model AuthProvider {
  id           String   @id @default(uuid())
  userId       String
  providerType String
  providerId   String
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("authProviders")
}

model BankDetail {
  id            String   @id @default(uuid())
  holderName    String
  bankName      String
  accountNumber String
  campaignId    String   @unique
  campaign      Campaign @relation("CampaignBankDetails", fields: [campaignId], references: [id])

  @@map("bank_details")
}

model Category {
  id       String     @id @default(uuid())
  label    String
  slug     String     @unique
  campaign Campaign[]

  @@map("categories")
}

model Campaign {
  id           String         @id @default(uuid())
  userId       String
  title        String         @db.VarChar(50)
  description  String
  goalAmount   Decimal        @db.Decimal(12, 2)
  raisedAmount Decimal        @default(0.00) @db.Decimal(12, 2)
  status       CampaignStatus @default(PENDING)
  deadline     DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  // Relations

  campaignMedia CampaignMedia[] @relation("OtherCampaignMedia")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  categoryId String
  Category   Category @relation(fields: [categoryId], references: [id])

  BankDetail BankDetail? @relation("CampaignBankDetails")

  businessId String?   @unique
  charityId  String?   @unique
  business   Business? @relation(fields: [businessId], references: [id])
  charity    Charity?  @relation(fields: [charityId], references: [id])

  @@map("campaigns")
}

model Business {
  id                String         @id @default(uuid())
  fullName          String
  website           String?
  sector            BusinessSector
  tinNumber         String
  licenseNumber     String
  logo              String?
  publicEmail       String?
  publicPhoneNumber String?
  contactEmail      String
  contactPhone      String
  region            String
  city              String
  relativeLocation  String?

  tinCertificateId String

  docs     CampaignDoc[]
  campaign Campaign?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations

  @@map("businesses")
}

model Charity {
  id                 String  @id @default(uuid())
  fullName           String
  isOrganization     Boolean
  registrationNumber String?
  tinNumber          String?
  logo               String?
  website            String?
  publicEmail        String
  publicPhoneNumber  String
  contactEmail       String
  contactPhone       String
  region             String
  city               String
  relativeLocation   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  campaign Campaign?

  // 
  docs CampaignDoc[]

  @@map("charities")
}

model CampaignMedia {
  id         String @id @default(uuid())
  campaignId String
  url        String

  imageType ImageType

  createdAt DateTime @default(now())

  // Relations
  campaignMedia Campaign @relation("OtherCampaignMedia", fields: [campaignId], references: [id])

  @@map("campaignMedias")
}

model CampaignDoc {
  id        String   @id @default(uuid())
  url       String
  createdAt DateTime @default(now())

  docType DocType

  // Relations
  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  charityId String
  charity   Charity @relation(fields: [charityId], references: [id], onDelete: Cascade)

  @@map("campaignDocs")
}

model Admin {
  id                     String       @id @default(uuid())
  email                  String       @unique
  passwordHash           String?
  rtHash                 String?
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  resetPasswordToken     String?
  resetPasswordExpiresAt DateTime?
  firstName              String
  lastName               String
  dateOfBirth            DateTime
  role                   AdminRoles
  otlToken               String?
  isActive               Boolean      @default(true)
  otlTokenExpiresAt      DateTime?
  Moderation             Moderation[]

  @@map("admins")
}

model Moderation {
  id        String           @id @default(uuid())
  adminId   String
  action    AdminActions
  target    ModerationTarget
  targetId  String
  reason    String?
  createdAt DateTime         @default(now())
  admin     Admin            @relation(fields: [id], references: [id])

  @@map("mods")
}

enum CampaignStatus {
  PENDING
  ACTIVE
  COMPLETED
  REJECTED
  REMOVED
}

enum AdminRoles {
  SUPERADMIN
  CALLCENTERAGENT
  CAMPAIGNREVIEWER
}

enum AdminActions {
  CREATE
  DELETE
  UPDATE
  APPROVE
  REJECT
}

enum ModerationTarget {
  CAMPAIGN
  TESTIMONIAL
  USER
  DONATION
}

enum BusinessSector {
  AGRICULTURE
  CONSTRUCTION
  EDUCATION
  ENERGY
  MANUFACTURING
  MEDIA
  MINING
  TECHNOLOGY
  TEXTILE
  TOURISM
  TRANSPORT
  OTHER
}

enum PersonalCause {
  MEDICAL
  RELOCATION
  REHABILITATION
}

enum DocType {
  TIN_CERTIFICATE
  REGISTRATION_CERTIFICATE
  SUPPORTING_DOCUMENT
}

enum ImageType {
  COVER_IMAGE
  SUPPORTING_IMAGE
}
