// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                             String         @id @default(uuid())
  email                          String         @unique
  passwordHash                   String?
  rtHash                         String?
  createdAt                      DateTime       @default(now())
  updatedAt                      DateTime       @updatedAt
  isActive                       Boolean        @default(true)
  isVerified                     Boolean        @default(false)
  emailVerificationCode          Int?
  emailVerificationCodeExpiresAt DateTime?
  resetPasswordToken             String?
  resetPasswordExpiresAt         DateTime?
  firstName                      String
  lastName                       String
  dateOfBirth                    DateTime
  profilePicture                 String?
  AuthProviders                  AuthProvider[]
  Campaign                       Campaign[]

  @@map("users")
}

model AuthProvider {
  id           String   @id @default(uuid())
  userId       String
  providerType String
  providerId   String
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("authProviders")
}

model Campaign {
  id           String         @id @default(uuid())
  userId       String
  title        String         @db.VarChar(50)
  description  String
  goalAmount   Decimal        @db.Decimal(12, 2)
  raisedAmount Decimal        @default(0.00) @db.Decimal(12, 2)
  status       CampaignStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories    Category[]      @relation("CampaignCategories")
  CampaignMedia CampaignMedia[]
  CampaignDoc   CampaignDoc[]

  @@map("campaigns")
}

model Category {
  id        String     @id @default(uuid())
  label     String
  slug      String     @unique
  campaigns Campaign[] @relation("CampaignCategories")

  @@map("categories")
}

model CampaignMedia {
  id         String @id @default(uuid())
  campaignId String
  url        String

  createdAt DateTime @default(now())

  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@map("campaignMedias")
}

model CampaignDoc {
  id         String @id @default(uuid())
  campaignId String
  url        String

  createdAt DateTime @default(now())

  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@map("campaignDocs")
}

model Admin {
  id                     String    @id @default(uuid())
  email                  String    @unique
  passwordHash           String?
  rtHash                 String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  resetPasswordToken     String?
  resetPasswordExpiresAt DateTime?
  firstName              String
  lastName               String
  dateOfBirth            DateTime
}

enum CampaignStatus {
  PENDING
  ACTIVE
  COMPLETED
  REJECTED
  REMOVED
}
